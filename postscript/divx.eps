%!PS-Adobe-3.1 EPSF-3.0
%%Title: DXBlueOnWhite.eps
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 9.0%AI9_PrintingDataBegin%%For: J F
%%CreationDate: 9/5/2001
%%CropBox: 0.000000 0.000000 294.008301 73.759766
%%BoundingBox: -5 0 150 50 
%%HiResBoundingBox: 0.000000 0.000000 294.008301 73.759766
%%LanguageLevel: 2 
%%DocumentData: Clean7Bit
%%Pages: 1 
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Gradient_Sep 1.0 0
%%+ procset Adobe_AGM_Gradient 1.0 0
%%+ procset Adobe_AGM_Core 2.0 0
%%DocumentFonts: 
%%DocumentSuppliedFonts: 
%%PageOrder: Ascend
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 

%AI7_Thumbnail: 128 32 8
%%BeginData: 4518 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD7CFFAF5A5A7EFD29FF845AA9FD4EFFA82F0607077EFD28FF5407
%2F2FFD4CFFA92F2F07070784FD29FF7E07067EFD4AFF7E2F060706075AFF
%FFFFA9072F072F072F072F072F072F072F072F072F072F07542F7E7EFD0F
%FF072FFD49FFA9292F072F075AA9FD04FF07070607070706070707060707
%07060707070607070706070707062F53A9FD0BFF7E5AFD47FF5A2F070706
%0753AFFD06FF2F0707072F07545A7E7E7E5A7E7E7E5A7E7E7E5A5A2F2F07
%2F0707072F0754A8FD4FFFAF7E0707072F0754A8FD08FF06070607067EFD
%11FFAF7E5A06070607060753FD4DFF5A29060706072FA9FD0AFF2F072F07
%2FFD16FF532F072F072F2FFD3DFFCFFD0BFFA95A072F072F0754A8FD0CFF
%0607070706FD17FF7E070707060753FD05FFA87E2F7EFFFFFFA92F5A7EFD
%15FF7E542FAFFFFFFF7E2F5AA8FD07FFCFCFCACFCACFCACFCFFD07FF5307
%06FD040784FD0EFF07072F0707FD18FF7E2F0707072FA8FD04FF7E072F07
%A9FFFF7E07072F2FAFFD11FFAF2F07072FA9FFFFFF7E07072F5AA9FD04FF
%FD04CFC9CFC9CFCACFCFFFFFFFA85A072F0707072F7EFD10FF0607060706
%FD19FF2F070607065AFD04FF2F0706075AFFFFFF5307060707A9FD10FF29
%07060753FD05FF7E070607062F84FFCACFA7CFC9C9A7CEC9CEA7CFCFA82F
%07060706070784FD12FF2F072F072FFD19FFA9072F072F07FD04FF54072F
%077EFD04FF2F2F072F07FD0FFF2F2F072F2FFD07FFA85A072F072F2FA9CF
%CFC9CEC8CEC8CEC9FF8454072F072F072F7EFD14FF0707060707FD19FFA8
%0707070607A8FFFFFF2F0706075AFD05FFFD0507AFFD0CFF2F0706072FFD
%0AFF8407070607072F5AFFCAC9A6CFCF84FD04070607077EA8FD15FF2F07
%07072FFD1AFF072F070707A9FFFFFF5A0707077EFD05FFAF072F070707AF
%FD09FFAF2F2F070707AFFD0CFF5A07072F0707077EA9FF7E2F0707072F07
%075AFD18FF0607060706FD19FF7E0706070607FD04FF2F07060759FD06FF
%A8060706070684FD07FFA90707060706A9FD0EFFA82F0607060706070707
%06070607065AA8FD19FF2F072F072FFD19FF5A072F072F2FFD04FF5A072F
%0784FD07FFA9072F072F0784FD06FF072F072F07A9FD10FFCFA9072F072F
%072F072F072F53FFCFCFCFFD18FF0607070706FD18FFA9070706070784FD
%04FF2F0707075AFD08FF7E07070607075AA8FFFF7E06070707067EFD10FF
%CACF5A070707060707070607072FA8CFCAFD19FF07072F0707FD17FFAF07
%2F07070730FD05FF54072F077EFD09FF5A0707072F072F7E5A0707072F07
%5AFD11FFA92F07072F0707295A0707072F07075AFFCFFD18FF0607060706
%FD15FFA87E060706070629A8FD05FF2F0706075AFD0AFF2F060706070607
%06070607062FA9FD0FFFA82F06070607062F5AFFA8A953070607060707A9
%FD18FF2F072F072FA8FD12FFAF5A2F072F072F0730A9FD06FF54072F077E
%FD0BFF30072F072F072F072F072FFD10FF5A2F072F072F0784FFCFC8C8C8
%CFA85A072F072F075AFD17FF07070607072F7EFD09FFA8A984A97E7E2F2F
%070706070707067EA9FD07FF2F0706075AFD0BFFA8290607070706070729
%A8FD0EFF84FD040706075AFFCACEC8C8A6C8C8C9C9FF5307060707295AFD
%15FF2F0707072F0707072F0707072F0707072F0707072F0707072F070707
%2F5AFD0AFF5A0707077EFD0CFFA907072F0707072F7EFD0DFFA830070707
%2F075AA8FFCFCFC9CEC9CEC8CEC9CEC9FFFF7E072F07072FFD14FF2F0706
%070607060706070607060706070607060706070607065453A8FD0CFF7E07
%0607A8FD0DFF7E29060706297EFD0DFF53070607060753FFFFFFA8CFC9CE
%A7CEC9C9A7CFC9CFA8FFFFFF592F060753FD14FF7E7E5A847E7E5A847E7E
%5A847E7E5A847E7E5A8484A9A9FD11FF847EA8FD10FFA97EA9FD0DFF8507
%2F072F0754A8FD05FFCFFFFD04CFC9FD04CFFD06FF7E2F7EA9FD5CFFA82F
%060707072FA9FD08FFCFCFCACFCACFCAFFCFFD66FF2F2F0707075AA8FD0D
%FFCFFD69FF7E070706070784FD77FFA830072F073084FD78FF5307060707
%84FD79FF5A2F072F5AFD7AFFA954297EA9FD38FFFF
%%EndData
%%EndComments
%%BeginDefaults
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 233 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_dst64 64 string def
/AGMCORE_srcLen nd
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_imagestring0 nd
/AGMCORE_imagestring1 nd
/AGMCORE_imagestring2 nd
/AGMCORE_imagestring3 nd
/AGMCORE_imagestring4 nd
/AGMCORE_imagestring5 nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_mbuf () def
/AGMCORE_ybuf () def
/AGMCORE_kbuf () def
/AGMCORE_gbuf () def
/AGMCORE_bbuf () def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_arg1 nd
/AGMCORE_arg2 nd
/AGMCORE_&setgray nd
/AGMCORE_&image nd
/AGMCORE_&colorimage nd
/AGMCORE_&imagemask nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&&setcolorspace nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_in_rip_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ccimage_exists nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_ndx nd
/AGMCORE_err_strings nd
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/bdf
{
	bind def
} bind def
/xdf
{
	exch def
} def
/ldf 
{
	load def
} def
/ddf
{
	put
} def	
/xddf
{
	3 -1 roll put
} def	
/xpt
{
	exch put
} def
	/bdict
	{
		mark
	} def
	
	/edict
	{
		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
	}def
	
/ps_level
	/languagelevel where{
		pop languagelevel
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/ndf
{
	1 index where{
		pop pop pop
	}{
		dup xcheck
		{bind}if
		def
	}ifelse
} def
/skip_image
{
	has_color ne{
		dup 256 idiv
		{currentfile AGMCORE_str256 readstring pop pop}repeat
		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval
		readstring pop pop
	}{
		pop
	}ifelse
} def
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
} def
/colorbuf
{
	0 1 2 index length 1 sub
		{
		dup 2 index exch get 
		255 exch sub 
		2 index 
		3 1 roll 
		put
		} for
} def
/makereadonlyarray
{
	/packedarray where
		{pop packedarray}
		{array astore readonly}
	ifelse
} def
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq 
	{
		dup /HalftoneType get 1 eq
			{
			/SpotFunction get
			}
			{
			dup /HalftoneType get 2 eq
				{
				/GraySpotFunction get
				}
				{
				pop
				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}
				{dup mul exch dup mul add 1 exch sub}ifelse}bind
				}
			ifelse
			}
		ifelse
	}
	if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	userdict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	/AGMCORE_arg2 xdf
	/AGMCORE_arg1 xdf
	
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			dup (.) ne AGMCORE_arg1 0 lt and
				{
				pop
				}
				{
				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
					{
					currentpoint AGMCORE_deltaY sub exch pop
					clippath pathbbox pop pop pop 44 add exch moveto
					} if
				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
				} ifelse
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
			dup 94 eq 
				{
				pop
				AGMCORE_arg1 0 ge
					{
					AGMCORE_arg1 AGMCORE_str256 cvs
					dup /AGMCORE_tmp exch length def
					AGMCORE_str256 exch 0 exch putinterval
					AGMCORE_str256 0 AGMCORE_tmp getinterval
					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
						{
						currentpoint AGMCORE_deltaY sub exch pop
						clippath pathbbox pop pop pop 44 add exch moveto
						} if
					AGMCORE_str256 0 AGMCORE_tmp getinterval show
					}
					{
					/AGMCORE_arg1 0 def
					} ifelse
				0 1 AGMCORE_str256 length 1 sub
					{
					AGMCORE_str256 exch 0 put
					}for
				/AGMCORE_tmp 0 def
				AGMCORE_arg1 0 ne
					{
					/AGMCORE_arg1 AGMCORE_arg2 def
					} if
				}
				{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
				}ifelse
			} ifelse
		} forall
} bdf
level2{
	/AGMCORE_map_reserved_ink_name
	{
		dup type /stringtype eq{
			dup /Red eq{
				pop (_Red_)
			}{
				dup /Green eq{
					pop (_Green_)
				}{
					dup /Blue eq{
						pop (_Blue_)
					}{
						dup /Cyan eq{
							pop (_Cyan_)
						}{
							dup /Magenta eq{
								pop (_Magenta_)
							}{
								dup /Yellow eq{
									pop (_Yellow_)
								}{
									dup /Black eq{
										pop (_Black_)
									}{
										dup / eq{
											pop (Process)
										}if
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}if
	}def
}if
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not
		{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror
			{
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and {
				$error /newerror false put
				AGMCORE_cur_err /AGMCORE_bad_environ eq
					{
					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version
					}
					{
					AGMCORE_cur_err 0 0
					} ifelse
				compose_error_msg
				} if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
		/AGMCORE_&&setcolorspace /setcolorspace ldf
	}if
	/AGMCORE_&image systemdict/image get def
	/AGMCORE_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMCORE_&colorimage /colorimage ldf
	}if
	/AGMCORE_in_rip_sep
		level2{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_gstate_known{
		where{
			/Adobe_AGM_Core_Id known
		}{
			false
		}ifelse
	}ndf
	/AGMCORE_GSTATE AGMCORE_gstate_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 7 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	end
}def
/page_setup
{
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or
		}ifelse
	def
	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots
	}ifelse
	{
		/setcmykcolor[
			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx
			/setcmykcolor load dup type/operatortype ne{/exec cvx}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/ln /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		/invert_image_samples
		{
			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
		/get_gstate
		{
			AGMCORE_GSTATE begin
			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def
			/AGMCORE_GSTATE_clr_spc currentcolorspace def
			/AGMCORE_GSTATE_clr_indx 0 def
			/AGMCORE_GSTATE_clr_comps 12 array def
			mark currentcolor counttomark
				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put
				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop
			/AGMCORE_GSTATE_fnt rootfont def
			/AGMCORE_GSTATE_lw currentlinewidth def
			/AGMCORE_GSTATE_lc currentlinecap def
			/AGMCORE_GSTATE_lj currentlinejoin def
			/AGMCORE_GSTATE_ml currentmiterlimit def
			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf
			/AGMCORE_GSTATE_sa currentstrokeadjust def
			
			/AGMCORE_GSTATE_clr_rnd currentcolorrendering def
			/AGMCORE_GSTATE_op currentoverprint def
			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def
			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def
			currentcolortransfer 
				cvlit /AGMCORE_GSTATE_gy_xfer xdf 
				cvlit /AGMCORE_GSTATE_b_xfer xdf
				cvlit /AGMCORE_GSTATE_g_xfer xdf 
				cvlit /AGMCORE_GSTATE_r_xfer xdf
			/AGMCORE_GSTATE_ht currenthalftone def
			/AGMCORE_GSTATE_flt currentflat def
			end
		}ndf
		
		/set_gstate
		{
			AGMCORE_GSTATE begin
			AGMCORE_GSTATE_ctm setmatrix
			AGMCORE_GSTATE_clr_spc setcolorspace
			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get
			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor
			AGMCORE_GSTATE_fnt setfont
			AGMCORE_GSTATE_lw setlinewidth
			AGMCORE_GSTATE_lc setlinecap
			AGMCORE_GSTATE_lj setlinejoin
			AGMCORE_GSTATE_ml setmiterlimit
			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash
			AGMCORE_GSTATE_sa setstrokeadjust
			
			AGMCORE_GSTATE_clr_rnd setcolorrendering
			AGMCORE_GSTATE_op setoverprint
			AGMCORE_GSTATE_bg cvx setblackgeneration
			AGMCORE_GSTATE_ucr cvx setundercolorremoval
			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx
				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer
			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
				{
				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne
					{
					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark
					} if
				}{
				AGMCORE_GSTATE_ht sethalftone
				} ifelse
			AGMCORE_GSTATE_flt setflat
			end
		}ndf
		AGMCORE_producing_seps not{
	
			/setcolorspace where{
				/Adobe_AGM_Core_Id known not
			}{
				true
			}ifelse
			{
				/setcolorspace
				{
					dup type dup /arraytype eq exch /packedarraytype eq or{
						dup 0 get dup /Separation eq{
							pop
							[ exch {} forall ]
							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put
						}{
							/DeviceN eq {
								[ exch {} forall ]
								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put
							}if
						}ifelse
					}if
					AGMCORE_&&setcolorspace 
				}def
			}if
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/ln{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/op /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Core 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	Adobe_AGM_Core/AGMCORE_name xddf
	false
	currentpagedevice/SeparationColorNames get{
		AGMCORE_name eq or
	}forall
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	1 setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMCORE_&imagemask
			}{
				AGMCORE_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMCORE_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMCORE_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/rdline {
	currentfile AGMCORE_str256 readline pop
} def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMCORE_src256 readstring pop
		dup length /AGMCORE_srcLen exch def
		/AGMCORE_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{
			1 index exch get
			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put
			/AGMCORE_ndx AGMCORE_ndx 1 add def
		}for
		pop
		AGMCORE_dst64 0 AGMCORE_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
	 						currentoverprint not{
			 					1 AGMCORE_&setgray
	 							knockout_image_samples
			 					currentdict imageormask_sys
			 				}{
			 					nulldevice currentdict imageormask_sys
			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										nulldevice
									}{
										invert_image_samples
									}ifelse
								}{
		 							currentoverprint not{
		 								knockout_image_samples
				 					}{
				 						nulldevice
				 					}ifelse
					 			}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
									
								currentcolortransfer
								{pop 1} exch addprocs 4 1 roll				
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								{pop 1} exch addprocs 4 1 roll
								setcolortransfer
									
								MultipleDataSources NComponents AGMCORE_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
		 								currentoverprint not{
		 									knockout_image_samples
				 						}{
				 							nulldevice
				 						}ifelse
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/tint_image_to_color
{
	begin
		Width Height BitsPerComponent ImageMatrix 
		/DataSource load
	end
	Adobe_AGM_Core begin
		/AGMCORE_mbuf 0 string def
		/AGMCORE_ybuf 0 string def
		/AGMCORE_kbuf 0 string def
		{
			colorbuf dup length AGMCORE_mbuf length ne
				{
				dup length dup dup
				/AGMCORE_mbuf exch string def
				/AGMCORE_ybuf exch string def
				/AGMCORE_kbuf exch string def
				} if
			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop
		}
		addprocs
		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage	
	end
} def			
/sep_imageormask_lev1
{
	begin
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{
				255 mul round cvi GrayLookup exch get
			} currenttransfer addprocs settransfer
			currentdict imageormask
		}{
			/sep_colorspace_dict AGMCORE_gget/Components known{
				MappedCSA 0 get /DeviceCMYK eq{
					Components aload pop
				}{
					0 0 0 Components aload pop 1 exch sub
				}ifelse
				
				Adobe_AGM_Core/AGMCORE_k xddf 
				Adobe_AGM_Core/AGMCORE_y xddf 
				Adobe_AGM_Core/AGMCORE_m xddf 
				Adobe_AGM_Core/AGMCORE_c xddf 
					
				AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{
					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer
					currentdict imageormask
				}{ 
					
					currentcolortransfer
					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll
					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer
					currentdict tint_image_to_color
				}ifelse
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
					currentdict imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
						setcolortransfer 
						currentdict tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	end
}def
/sep_image_lev1_sep
{
	begin
		/sep_colorspace_dict AGMCORE_gget/Components known{
			Components aload pop
			
			Adobe_AGM_Core/AGMCORE_k xddf 
			Adobe_AGM_Core/AGMCORE_y xddf 
			Adobe_AGM_Core/AGMCORE_m xddf 
			Adobe_AGM_Core/AGMCORE_c xddf 
				
			{AGMCORE_c mul 1 exch sub}
			{AGMCORE_m mul 1 exch sub}
			{AGMCORE_y mul 1 exch sub}
			{AGMCORE_k mul 1 exch sub}
		}{ 
			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
		}ifelse
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMCORE_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or{
 								knockout_image_samples
		 					}{
		 						nulldevice 
		 					}ifelse
							currentdict imageormask_sys
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/read_image_file
{
	AGMCORE_imagefile 0 setfileposition
	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	{ (AGMCORE_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Core/AGMCORE_imagefile xddf 
		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMCORE_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMCORE_imagefile exch writestring
		}for
		true
	}ifelse
}def
/imageormask_l2_overprint
{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile
	}{
		currentdict imageormask
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				nulldevice currentdict imageormask_sys
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_imageormask_lev1
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		currentdict
		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
			
			{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
			imageormask
		}{
			
			MappedCSA 0 get /DeviceGray eq {
				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceCMYK eq {
					currentcolortransfer
					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}{ 
					currentcolortransfer
					{pop 1} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
					setcolortransfer 
					tint_image_to_color
				}ifelse
			}ifelse
		}ifelse
	end end
}def
/indexed_image_lev1_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
		
		AGMCORE_get_ink_data currenttransfer addprocs settransfer
		
		currentdict imageormask_sys
			
	end end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMCORE_&imagemask
		}{
			AGMCORE_&image
		}ifelse
			
	end end
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false op [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/NComponents 1 def
			/ImageType 1 def
			/Decode [0 1 def]
			/SkipImageProc {false} def
			currentdict
		end
	}if
	dup begin
		/HostSepColorImage false def
		currentdict/Decode known not{
			/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
			] 
			def
		}if
		currentdict/Operator known not{
			/Operator /image def
		}if
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/cpaint_gcomp
{
	AGM_preserve_spots{
		gsave
		nulldevice
	}if
}def
/cpaint_gsep
{
	AGM_preserve_spots{
		grestore
		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 
	}{	
		gsave
		nulldevice
	}ifelse
}def
/cpaint_gend
{
	AGM_preserve_spots{
		Adobe_AGM_Core/AGMCORE_ovp get setoverprint
	}{
		grestore
	}ifelse
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Gradient 1.1 0
%%Version: 1.1 0
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Gradient 191 dict dup begin put
/nd{
	null def
}bind def
/AGMGrad_&image nd
/AGMGrad_&colorimage nd
/AGMGrad_&fill nd
/AGMGrad_subSampleOK nd
/AGMGrad_d255 nd
/AGMGrad_sSave nd
/AGMGrad_dUserSpace nd
/AGMGrad_bUMatrix nd
/AGMGrad_imageMatrix nd
/AGMGrad_saveMatrix nd
/AGMGrad_gMatrix nd
/AGMGrad_tmpMat nd
/AGMGrad_currentcolorspace nd
/AGMGrad_bbox nd
/AGMGrad_usingShells nd
/AGMGrad_byte nd
/AGMGrad_blackTmp nd
/AGMGrad_yellowTmp nd
/AGMGrad_magentaTmp nd
/AGMGrad_cyanTmp nd
/AGMGrad_cnt nd
/AGMGrad_usingSmoothShade nd
/AGMGrad_index nd
/AGMGrad_rampFuncsArray nd
/AGMGrad_boundsArray nd
/AGMGrad_encodeArray nd
/AGMGrad_beginCoord nd
/AGMGrad_colorSpace nd
/AGMGrad_firstFill nd
/AGMGrad_lastFill nd
/AGMGrad_size nd
/AGMGrad_rampLen nd
/AGMGrad_invert nd
/AGMGrad_endCoord nd
/AGMGrad_s nd
/AGMGrad_j nd
/AGMGrad_i nd
/AGMGrad_tintNdx nd
/AGMGrad_cmpNdx nd
/AGMGrad_nColorSpace nd
/AGMGrad_C0 nd
/AGMGrad_C0_Space nd
/AGMGrad_C1 nd
/AGMGrad_C1_Space nd
/AGMGrad_rampColorSpace nd
/AGMGrad_bUMatrix nd
/AGMGrad_channels nd
/AGMGrad_len nd
/AGMGrad_currenttint nd
/AGMGrad_currentcolorant nd
/AGMGrad_cmpIndx nd
/AGMGrad_ndx nd
/AGMGrad_rampIndex nd
/AGMGrad_firstShell nd
/AGMGrad_ramp nd
/AGMGrad_rampDict nd
/AGMGrad_endPoint nd
/AGMGrad_rampPoint nd
/AGMGrad_midPoint nd
/AGMGrad_colorRamp nd
/AGMGrad_nSamples nd
/AGMGrad_sInc nd
/AGMGrad_bInc nd
/AGMGrad_nSubSamples nd
/AGMGrad_optimize nd
/AGMGrad_nRadSamples nd
/AGMGrad_uRampLen nd
/AGMGrad_pChange nd
/AGMGrad_xBCInc nd
/AGMGrad_yBCInc nd
/AGMGrad_nColorsBd nd
/AGMGrad_gradType nd
/AGMGrad_gradName nd
/AGMGrad_renderFlag nd
/AGMGrad_retainPath nd
/AGMGrad_enabledSmoothShade nd
/AGMGrad_rampData nd
/AGMGrad_nRamps nd
/AGMGrad_xHi nd
/AGMGrad_yHi nd
/AGMGrad_radHilite nd
/AGMGrad_gradNames nd		
/AGMGrad_tint nd
/AGMGrad_tint_min nd
/AGMGrad_tint_max nd
/AGMGrad_range nd
/doc_setup
{
	Adobe_AGM_Core begin
	Adobe_AGM_Gradient begin
	initializeVars
	
	level2{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	/image where{
		/image get /AGMGrad_&image xp
	}if
	/colorimage where{
		/colorimage get /AGMGrad_&colorimage xp
	}if
	/AGMGrad_&fill /fill load def
	end
	end
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/Adobe_AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/doc_trailer{
	currentdict Adobe_AGM_Gradient eq{
		end
	}if
	Adobe_AGM_Gradient/unload get exec
}def
 
/page_setup
{
	Adobe_AGM_Gradient begin
	/AGMGrad_subSampleOK 
		AGMCORE_deviceDPI AGMGrad_dpiThreshold le 
		currentScreenFreq AGMGrad_screenFreqThreshold le and 
		AGMGrad_contoneDevice not and 
	def
	initializeRectFill
	AGMCORE_producing_seps{
		initializeSep
	}{
		initializeComposite
	}ifelse
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	end
}def
/page_trailer
{
}def
/initializeVars{
	/AGMGrad_d255 256 array def
	0 1 255{
		AGMGrad_d255 exch dup 255 div put
	}bind for
	/AGMGrad_sSave nd
	/AGMGrad_dUserSpace matrix defaultmatrix def
	/AGMGrad_bUMatrix matrix def
	/AGMGrad_imageMatrix matrix def
	/AGMGrad_saveMatrix matrix def
	/AGMGrad_gMatrix matrix def
	/AGMGrad_tmpMat matrix def
	/AGMGrad_currentcolorspace nd
	/AGMGrad_bbox 4 array def
	/AGMGrad_black (/AGM_Black) def
}def
/queryDevice{
	/AGMGrad_PathsOnly false ndf_key
	/AGMGrad_useShells false ndf_key
	/AGMGrad_usingShells AGMGrad_useShells pt
	/AGMGrad_useSmoothShade true ndf_key
	/AGMGrad_dpiThreshold 600 ndf_key
	/AGMGrad_screenFreqThreshold 150 ndf_key
	/AGMGrad_contoneDevice false ndf_key
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not AGMCORE_producing_seps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/AGMGrad_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/AGMGrad_blackTmp xp
			/AGMGrad_yellowTmp xp
			/AGMGrad_magentaTmp xp
			/AGMGrad_cyanTmp xp
			/AGMGrad_cnt 0 pt
			
			[
			AGMGrad_byte dup 0
			AGMGrad_cyanTmp 
				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .3 /mul cvx
			AGMGrad_magentaTmp
				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .59 /mul cvx
			AGMGrad_yellowTmp
				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx .11 /mul cvx
			AGMGrad_blackTmp 
				/AGMGrad_cnt cvx /get cvx AGMGrad_d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/AGMGrad_cnt dup cvx 1 /add cvx /pt cvx
			] cvx bind
			
			AGMGrad_&image
		}def
	}ifelse
	
	/setcolor nd
	/currentcolor nd
	
	/setcolorspace
	{
		0 get /AGMGrad_currentcolorspace xp
		AGMGrad_currentcolorspace /DeviceCMYK eq{
			/setcolor {setcmykcolor} bind pt
			/currentcolor {currentcmykcolor} bind pt
		}{
			AGMGrad_currentcolorspace /DeviceGray eq{
				/setcolor {setgray} bind pt
				/currentcolor {currentgray} bind pt
			}{
				AGMGrad_currentcolorspace /DeviceRGB eq{
					/setcolor {setrgbcolor} bind pt
					/currentcolor {currentrgbcolor} bind pt
				}if
			}ifelse
		}ifelse
	}def
	/currentcolorspace
	{
		[ AGMGrad_currentcolorspace ]
	}def
	/dictImage
	{
		pop
		currentcolorspace 0 get /DeviceGray eq {
			aload pop
			AGMGrad_&image
		}{
			dup length /AGMGrad_tmp xp
			aload pop true AGMGrad_tmp
			colorimage
		}ifelse
	}def
}def
/initializeLev2{
	/dictImage
	{
		10 dict begin
			/Decode xdf
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			DataSource type /arraytype eq{
				/MultipleDataSources true def
			}if
			currentdict
		end
		AGMGrad_&image
	}def
}def
/initializeShading{
	AGMGrad_useSmoothShade level3 and{
		/AGMGrad_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/AGMGrad_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/AGMGrad_index AGMGrad_gradType 0 eq {0}{AGMGrad_maxRampIndex} ifelse pt
		/AGMGrad_rampFuncsArray AGMGrad_nRamps array pt
		/AGMGrad_boundsArray AGMGrad_nRamps 1 sub array pt
		/AGMGrad_encodeArray AGMGrad_nRamps 2 mul array pt
		/AGMGrad_beginCoord AGMGrad_rampPoint pt
		/AGMGrad_colorSpace null pt
		/AGMGrad_firstFill AGMGrad_rampIndex AGMGrad_maxRampIndex eq pt
		/AGMGrad_lastFill false pt
	}def
	/linealShFill{
		popRampSpace
		AGMGrad_gMatrix pushRampSpace
		
		/AGMGrad_size AGMGrad_index 1 add pt
		AGMGrad_size AGMGrad_nRamps lt {
			/AGMGrad_rampFuncsArray AGMGrad_rampFuncsArray 0 AGMGrad_size getinterval pt
			/AGMGrad_boundsArray AGMGrad_boundsArray 0 AGMGrad_size 1 sub getinterval pt
			/AGMGrad_encodeArray AGMGrad_encodeArray 0 AGMGrad_size 2 mul getinterval pt
		}if
		
		/AGMGrad_rampLen AGMGrad_endCoord AGMGrad_beginCoord sub pt
		bdict
			/ShadingType 2
			/ColorSpace AGMGrad_colorSpace
			/Function 
				bdict
					/FunctionType 3
					/Domain [0 1]
					/Functions AGMGrad_rampFuncsArray
					/Bounds AGMGrad_boundsArray
					/Encode AGMGrad_encodeArray
				edict
				AGMGrad_nRamps 1 gt{
					dup begin
					/Bounds [ Bounds {AGMGrad_beginCoord sub AGMGrad_rampLen div} forall] def
					end
				}if
			/Extend [AGMGrad_firstFill AGMGrad_lastFill]
			/Domain [0 1] 
			/Coords [AGMGrad_beginCoord 0 AGMGrad_endCoord 0]
		edict
		shfill
	}def
	
	/radialShFill{
		/AGMGrad_size AGMGrad_nRamps AGMGrad_index sub pt
		AGMGrad_size AGMGrad_nRamps lt {
			/AGMGrad_rampFuncsArray AGMGrad_rampFuncsArray AGMGrad_index AGMGrad_size getinterval pt
			/AGMGrad_boundsArray AGMGrad_boundsArray AGMGrad_index AGMGrad_size 1 sub getinterval pt
			/AGMGrad_encodeArray AGMGrad_encodeArray AGMGrad_index 2 mul AGMGrad_size 2 mul getinterval pt
		}if
		
		/AGMGrad_rampLen AGMGrad_beginCoord AGMGrad_endCoord sub pt
		bdict
			/ShadingType 3
			/ColorSpace AGMGrad_colorSpace
			/Function 
				bdict
					/FunctionType 3
					/Domain [0 1]
					/Functions AGMGrad_rampFuncsArray
					/Bounds AGMGrad_boundsArray
					/Encode AGMGrad_encodeArray
				edict
				AGMGrad_nRamps 1 gt{
					dup begin
					/Bounds [ Bounds {AGMGrad_endCoord sub AGMGrad_rampLen div} forall] def
					end
				}if
			/Extend [AGMGrad_lastFill false]
			/Domain [0 1] 
			/Coords [AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul AGMGrad_endCoord 0 0 AGMGrad_beginCoord] 
		edict
		shfill
		
		AGMGrad_radHilite{
			AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul translate
		}if
	}def
	
	/sampFunc{
		/AGMGrad_tmp exch pt
		bdict
			/FunctionType 0
			/Order 1
			/Size [AGMGrad_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource AGMGrad_tmp
			/Range [0 1]
		edict
	}def
	
	/fillRamp{
	
	
		/AGMGrad_invert AGMGrad_midPoint 0.5 lt pt
		AGMGrad_rampIndex AGMGrad_maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		AGMGrad_colorSpace null eq{
			/AGMGrad_colorSpace AGMGrad_rampColorSpace pt
		}{
			AGMGrad_colorSpace AGMGrad_rampColorSpace ne {
				/AGMGrad_index AGMGrad_index 1 
				AGMGrad_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/AGMGrad_colorSpace AGMGrad_rampColorSpace pt
			} if
		}ifelse
		/AGMGrad_endCoord AGMGrad_endPoint pt	
		
		Interpolation{
			false
		}{
			SpotColor{
				false
			}{
				AGMCORE_is_cmyk_sep
			}ifelse
		}ifelse
		
		{ 
			AGMCORE_composite_job{
							
				/AGMGrad_s NumSamples NumComponents mul string def
				/AGMGrad_j 0 pt
				0 1 NumSamples 1 sub {
					/AGMGrad_i exch pt
					0 1 NumComponents 1 sub {
						Ramp exch get AGMGrad_i get AGMGrad_s AGMGrad_j 3 -1 roll put 
						/AGMGrad_j AGMGrad_j 1 add pt
					}for
				}for
				
				AGMGrad_rampFuncsArray AGMGrad_index
				bdict
					/FunctionType 0
					/Order 1
					/Size [NumSamples]
					/Domain [0 1]
					/BitsPerSample 8
					/DataSource AGMGrad_s
					/Range [NumComponents {0 1} repeat]
				edict
				put
			}{
				AGMGrad_rampFuncsArray AGMGrad_index
					AGMCORE_cyan_plate{
						Ramp 0 get
					}if
					AGMCORE_magenta_plate{
						Ramp 1 get
					}if
					AGMCORE_yellow_plate{
						Ramp 2 get
					}if
					AGMCORE_black_plate{
						Ramp 3 get
					}if
					sampFunc
					dup begin /Decode [1 0] def end
				put
			}ifelse
			/AGMGrad_invert false pt
		}{
			
			AGMGrad_rampFuncsArray AGMGrad_index
				bdict
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log AGMGrad_invert{1 AGMGrad_midPoint sub}{AGMGrad_midPoint}ifelse log div
					AGMGrad_gradType 0 eq{
						AGMGrad_invert{/C1}{/C0}ifelse AGMGrad_C0
						AGMGrad_invert{/C0}{/C1}ifelse AGMGrad_C1
					}{
						AGMGrad_invert{/C0}{/C1}ifelse AGMGrad_C1
						AGMGrad_invert{/C1}{/C0}ifelse AGMGrad_C0
					}ifelse
				edict
			put
		}ifelse
		
		AGMGrad_rampIndex 0 ne{
			AGMGrad_boundsArray AGMGrad_index AGMGrad_gradType 1 eq{1 sub}if AGMGrad_endCoord put
		} if
		
		0 1 AGMGrad_invert {exch}if
		AGMGrad_encodeArray AGMGrad_index 2 mul 1 add 3 -1 roll put
		AGMGrad_encodeArray AGMGrad_index 2 mul 3 -1 roll put
		AGMGrad_rampIndex 0 eq {
			/AGMGrad_lastFill true pt
			AGMGrad_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/AGMGrad_index AGMGrad_index 1 
		AGMGrad_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	AGMGrad_PathsOnly not level2 not and{
		/linealFill{
			8 setImageParms
			AGMGrad_colorRamp{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 AGMGrad_&colorimage
			}{
				currentgray makeByte8 AGMGrad_&image 
			}ifelse
		}def
	}if
	level3{
		/getRampColorSpace{
			SpotColor{
				
				AGMGrad_rampDict/AGMGrad_midPoint 0.5 put
				
				[/DeviceN 
					[
					Colorants 0 get
					substituteBlack
					NumTintComponents 2 eq{
						Colorants 1 get
						substituteBlack
					}if
					] 
					CSA map_csa 
					[
						/AGMGrad_range NumTintComponents 2 eq {1} {0} ifelse pt
						/AGMGrad_tint_range_0 TintRange AGMGrad_range get 0 get pt
						/AGMGrad_tint_range_1 TintRange AGMGrad_range get 1 get pt
						AGMGrad_tint_range_0 AGMGrad_tint_range_1 2 copy gt{
							/AGMGrad_tint_min xdf
							/AGMGrad_tint_max xdf
						}{
							/AGMGrad_tint_max xdf
							/AGMGrad_tint_min xdf
						}ifelse
						NumTintComponents 2 eq{	
							/exch cvx  /pop	cvx	
						}{
							AGMGrad_tint_range_0 AGMGrad_tint_range_1 gt{
								AGMGrad_tint_max /exch cvx /sub cvx	AGMGrad_tint_min /add cvx
							}if	
						}ifelse
						/AGMGrad_tint /xp cvx
											
						/AGMGrad_tintNdx 
							/AGMGrad_tint cvx 
							AGMGrad_tint_min /sub cvx 
							AGMGrad_tint_max AGMGrad_tint_min sub 
							dup 0 eq{
								pop 1
							}if
							/div cvx 
							NumSamples 1 sub /mul cvx /cvi cvx
							/dup cvx 0 /lt cvx {
								pop 0
							} /if cvx
							/dup cvx NumSamples 1 sub /gt cvx [
								/pop cvx NumSamples 1 sub
							] cvx /if cvx
						/pt cvx
						
						/AGMGrad_cmpNdx 0 pt
						NumComponents{
							Ramp AGMGrad_cmpNdx /get cvx /dup cvx /type cvx /stringtype /eq cvx{
								AGMGrad_tintNdx get
								AGMGrad_d255 exch get
							}/if cvx
							/AGMGrad_cmpNdx AGMGrad_cmpNdx 1 add pt
						}repeat
						{
							currentdict/Decode known{
								0 2 NumComponents 2 mul 1 sub{
									/AGMGrad_i xp
									NumComponents -1 roll
									Decode AGMGrad_i 1 add get 
									Decode AGMGrad_i get 
									sub mul 
									Decode AGMGrad_i get add
								}for
							}if
						} bind /exec cvx
					] cvx
				] setcolorspace
				/AGMGrad_nColorSpace currentcolorspace pt
			}if
			
			AGMGrad_nSamples 1 gt{ 
				firstRampColor
			}if
			SpotColor{
				/AGMGrad_C0 [
					currenttints 0 get
					currenttints length 2 eq{
						currenttints 1 get
					}if
				] pt
				/AGMGrad_C0_Space AGMGrad_nColorSpace pt
			}{
				/AGMGrad_C0 [currentcolor] pt
				/AGMGrad_C0_Space currentcolorspace pt
			}ifelse
			AGMGrad_nSamples 1 gt{ 
				lastRampColor
			}if
			SpotColor{
				/AGMGrad_C1 [
					currenttints 0 get
					currenttints length 2 eq{
						currenttints 1 get
					}if
				] pt
				/AGMGrad_C1_Space AGMGrad_nColorSpace pt
			}{
				/AGMGrad_C1 [currentcolor] pt
				/AGMGrad_C1_Space currentcolorspace pt
			}ifelse
			
			/AGMGrad_rampColorSpace AGMGrad_C0_Space pt
			
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/pt{
	Adobe_AGM_Gradient 3 1 roll put
}def
/xp{
	exch pt
}def
/ndf_key
{ 
	
	exch dup where{
		pop pop pop
	}{
		xp
	}ifelse
}def
/mySave{
	save /AGMGrad_sSave xp
}def
/myRestore{
	AGMGrad_sSave type /savetype eq{
		AGMGrad_sSave restore
	}if
}def
/pushRampSpace{
	newpath gsave
	dup /AGMGrad_bUMatrix xp concat 
}def
/popRampSpace{
	grestore
}def
/makeByte8{
	/AGMGrad_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup AGMGrad_tmp 3 index put 
		/AGMGrad_tmp AGMGrad_tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 AGMGrad_imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/path_bbox
{
	{currentpoint} stopped {
		0 0 0 0
	}{
		pop pop
		pathbbox
	}ifelse
}def
/expandOne	{
	/AGMGrad_tmp xp
	dup type /stringtype ne{
		AGMGrad_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 AGMGrad_tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/AGMGrad_channels xp
	/AGMGrad_len xp
	AGMGrad_channels{
		AGMGrad_len expandOne AGMGrad_channels 1 roll
	}repeat
}def
/substituteBlack{
	dup AGMGrad_black eq{
		pop /Black
	}if
}def
/settints
{
	/AGMGrad_currenttint xp
}def
/currenttints
{
	AGMGrad_currenttint
}def
/setcolorants
{
	/AGMGrad_currentcolorant xp
}def
/currentcolorants
{
	AGMGrad_currentcolorant
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/rampColor{
	
	
	/AGMGrad_cmpIndx 0 pt
	AGMCORE_producing_seps not SpotColor and AGMGrad_enabledSmoothShade and not{
		NumComponents{
			Ramp AGMGrad_cmpIndx get dup type /stringtype eq{
				/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx
			}if
			/AGMGrad_cmpIndx AGMGrad_cmpIndx 1 add pt
		}repeat
		{
			currentdict/Decode known{
				0 2 NumComponents 2 mul 1 sub{
					/AGMGrad_i xp
					NumComponents -1 roll
					Decode AGMGrad_i 1 add get 
					Decode AGMGrad_i get 
					sub mul 
					Decode AGMGrad_i get add
				}for
			}if
			setcolor
		} bind /exec cvx
	}if
	AGMCORE_producing_seps AGMGrad_enabledSmoothShade or SpotColor and{
		/mark cvx
		TintRamp 0 get dup type /stringtype eq{
			/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx
		}if
		NumTintComponents 2 eq{
			 TintRamp 1 get dup type /stringtype eq{
				/AGMGrad_ndx cvx /get cvx AGMGrad_d255 /exch cvx /get cvx
			}if
		}if
		(]) cvn cvx
		/settints cvx
		Colorants /setcolorants cvx
	}if
}def
/firstRampColor{
	/AGMGrad_ndx 0 pt
	[rampColor] cvx exec
}def			
/lastRampColor{
	/AGMGrad_ndx AGMGrad_nSamples 1 sub pt
	[rampColor] cvx exec
}def			
/useRectImage{
	AGMGrad_subSampleOK AGMGrad_usingSmoothShade not and{
		0 1 dtransform atan cvi 90 mod 0 eq
		1 0 dtransform atan cvi 90 mod 0 eq
		and
	}{
		false
	}ifelse
}def
/linealImage{
	useRectImage AGMGrad_PathsOnly or{
		rectImage
	}{
		rampImage
	}ifelse
}def
/linealRamp{
	pushRampSpace
	AGMGrad_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popRampSpace
	/AGMGrad_rampIndex AGMGrad_rampIndex 1 sub pt
	AGMGrad_rampIndex 0 ge{
		getRampData
	}if
}def
/radialGrad{
	/AGMGrad_usingShells currentoverprint AGMCORE_producing_seps and AGMGrad_usingShells or pt
	
	/AGMGrad_firstShell true pt
	currentoverprint AGMCORE_producing_seps and{
		
		newpath
		clippath path_bbox 
		1 add 4 1 roll
		1 add 4 1 roll
		1 sub 4 1 roll
		1 sub 4 1 roll
		AGMGrad_bbox astore pop
		
		newpath
		AGMGrad_bbox 0 get AGMGrad_bbox 1 get moveto
		AGMGrad_bbox 2 get AGMGrad_bbox 1 get lineto
		AGMGrad_bbox 2 get AGMGrad_bbox 3 get lineto
		AGMGrad_bbox 0 get AGMGrad_bbox 3 get lineto
		closepath
		dup
		gsave dup /AGMGrad_bUMatrix xp concat
		AGMGrad_rampPoint 0 moveto 0 0 AGMGrad_rampPoint 0 360 arc closepath
		eoclip fill
		popRampSpace
	}if
	pushRampSpace
	
	AGMGrad_radHilite{
		AGMGrad_rampPoint 1 lt{
			1 AGMGrad_rampPoint sub dup AGMGrad_xHi mul exch AGMGrad_yHi mul translate
		}if
	}if
	AGMGrad_nRamps{
		radialRamp
		/AGMGrad_rampIndex AGMGrad_rampIndex 1 sub pt
		AGMGrad_rampIndex 0 ge{
			getRampData
		}if
	}repeat
	
	popRampSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/AGMGrad_ramp true pt
	
	AGMGrad_rampDict null ne{
		end
	}if
	/AGMGrad_rampDict AGMGrad_rampData AGMGrad_rampIndex get pt
	AGMGrad_rampDict begin
		
		Start End
		AGMGrad_gradType 1 eq{
			exch
		}if
		/AGMGrad_endPoint xp
		/AGMGrad_rampPoint xp
		/AGMGrad_midPoint Mid pt
		/AGMGrad_colorRamp CSA map_csa 0 get /DeviceGray ne pt
		currentdict set_csa_crd
		SpotColor AGMCORE_producing_seps and{
			
			/SpotConverted [
				0 AGMGrad_SpotConverted
				NumTintComponents 2 eq{
					1 AGMGrad_SpotConverted
				}{
					false
				}ifelse
			] def
			/RenderCMYK SpotConverted aload pop or def
		}{
			/RenderCMYK true def
		}ifelse
		AGMGrad_ramp{
			/AGMGrad_nSamples NumSamples pt
			AGMGrad_enabledSmoothShade not{
				/AGMGrad_ramp AGMGrad_nSamples 1 gt pt
			}if
		}if
}def
/rampImage{
	AGMGrad_enabledSmoothShade{
		fillRamp
	}{
		NumSamples setImageParms
		[ Ramp aload pop ]
		currentdict/Decode known{
			Decode
		}{
			[ NumComponents {0 1} repeat ]
		}ifelse
		dictImage
	}ifelse
}def
	
/rectImage{
	gsave
	/AGMGrad_sInc 1 pt
	/AGMGrad_bInc 1 AGMGrad_nSamples div pt
	/AGMGrad_nSubSamples AGMGrad_nSamples pt
	/AGMGrad_optimize false pt
		
	AGMGrad_subSampleOK{
		/AGMGrad_uRampLen 1 0 dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/AGMGrad_pChange AGMGrad_uRampLen 0 eq{0}{AGMGrad_nSamples AGMGrad_uRampLen div}ifelse pt
		
		AGMGrad_pChange .5 gt dup /AGMGrad_optimize xp{
			/AGMGrad_nSubSamples AGMGrad_uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/AGMGrad_bInc 1 AGMGrad_nSubSamples div pt
			/AGMGrad_sInc AGMGrad_nSamples 1 sub AGMGrad_nSubSamples 1 sub div pt
		}if
	}if
	
	0
	AGMGrad_nSubSamples
	[
	/dup cvx
	AGMGrad_optimize {
		/round cvx /cvi cvx
	} if
	/AGMGrad_ndx /exch cvx /pt cvx
	rampColor
	0 0 AGMGrad_bInc 1 /rectfill cvx
	AGMGrad_bInc 0 /translate cvx
	AGMGrad_sInc /add cvx
	] cvx bind
	repeat
	pop
	grestore
}def
/radialInit{
	/AGMGrad_nRadSamples AGMGrad_nSamples dup 0 eq{pop 1}if pt
	/AGMGrad_sInc -1 pt
	/AGMGrad_rampLen AGMGrad_rampPoint AGMGrad_endPoint sub pt
	/AGMGrad_bInc AGMGrad_rampLen AGMGrad_nSamples div neg pt
	/AGMGrad_optimize false pt
	AGMGrad_subSampleOK{
		/AGMGrad_uRampLen
			AGMGrad_rampLen 0 dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt
			0 AGMGrad_rampLen dtransform AGMGrad_dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/AGMGrad_pChange 
			AGMGrad_uRampLen 0 eq{
				0
			}{
				AGMGrad_nSamples AGMGrad_uRampLen div
			}ifelse
		pt
		AGMGrad_pChange .5 gt dup /AGMGrad_optimize xp{
			/AGMGrad_nRadSamples AGMGrad_uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/AGMGrad_bInc AGMGrad_rampLen AGMGrad_nRadSamples div neg pt
			/AGMGrad_sInc AGMGrad_nSamples 1 sub AGMGrad_nRadSamples 1 sub div neg pt
		}if
	}if
	AGMGrad_radHilite{
		/AGMGrad_xBCInc AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_nRadSamples div pt
		/AGMGrad_yBCInc AGMGrad_yHi AGMGrad_rampLen mul AGMGrad_nRadSamples div pt
	}if
}def
/radialRamp{
	AGMGrad_enabledSmoothShade{
		fillRamp
	}{
		/AGMGrad_saveMatrix AGMGrad_saveMatrix currentmatrix pt
		
		radialInit
	
		true
		AGMCORE_producing_seps Interpolation and{
			AGMGrad_nSamples 1 gt{ 
				pop
				firstRampColor currentInkN
				lastRampColor currentInkN
				or
			}if
		}if
		{
			AGMGrad_rampPoint
		
			AGMGrad_nSamples 1 sub
		
			AGMGrad_nRadSamples 
			[
				/dup cvx
		
				AGMGrad_optimize{
					/round cvx /cvi cvx
				}if
		
				/AGMGrad_ndx /exch cvx /pt cvx
				
				AGMGrad_usingShells{
					/AGMGrad_firstShell cvx{
						/AGMGrad_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				rampColor
		
				AGMGrad_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx AGMGrad_bInc /add cvx /exch cvx
		
				AGMGrad_sInc /add cvx
		
				AGMGrad_radHilite{
					AGMGrad_xBCInc AGMGrad_yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			AGMGrad_usingShells{
				0 0 AGMGrad_rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		AGMGrad_saveMatrix setmatrix
		
		AGMGrad_radHilite{
			AGMGrad_xHi AGMGrad_rampLen mul AGMGrad_yHi AGMGrad_rampLen mul translate
		}if
		
		AGMGrad_usingShells AGMGrad_rampIndex 0 eq and{
			fill
		}if
	
	}ifelse
}def
/matrix_invertible
{
	{
		mark 1 index AGMGrad_tmpMat invertmatrix
	} stopped {
		cleartomark
		pop
		false
	}{
		cleartomark
		pop
		true
	}ifelse
}def
/Gb{
	Adobe_AGM_Gradient begin
	/AGMGrad_rampDict null pt
	mySave
}def
/Gd{
	Adobe_AGM_Gradient begin
	/AGMGrad_nColorsBd xp
	/AGMGrad_gradType xp
	/AGMGrad_gradName xp
	[
	[
}def
/Gm{
	AGMGrad_renderFlag 2 ne{
		AGMGrad_gradType 0 eq{
			linealRamp
		}{
			radialGrad
		}ifelse
	}{
		pop
	}ifelse
}def
	
/Gg{
	/AGMGrad_gMatrix xp
	4 npop
	/AGMGrad_gradName xp
	/AGMGrad_renderFlag xp
	/AGMGrad_retainPath xp
	/AGMGrad_enabledSmoothShade false pt
	
	path_bbox 3 index 2 index eq{
		2 index 1 index eq{
			/AGMGrad_renderFlag 2 pt
		}if
	}if
	
	AGMGrad_gMatrix matrix_invertible not{
		/AGMGrad_renderFlag 2 pt
	}if
	
	4 npop 
	AGMGrad_renderFlag 2 ne{
		/AGMGrad_enabledSmoothShade 
			level3{
				AGMGrad_usingSmoothShade
				AGMCORE_producing_seps not
				currentoverprint not or and
				AGMGrad_PathsOnly not and
				AGMCORE_in_rip_sep 1 currenttransfer exec 0.5 lt and not and
			}{
				false
			}ifelse
		pt
		
		AGMGrad_renderFlag 3 eq{
			eoclip
		}{
			clip
		}ifelse
			
		AGMGrad_gradNames AGMGrad_gradName known{
			AGMGrad_gradNames AGMGrad_gradName get
			aload pop
			/AGMGrad_gradType xp
			2 sub dup /AGMGrad_rampIndex xp
			/AGMGrad_maxRampIndex xp
			/AGMGrad_rampData xp
			/AGMGrad_nRamps AGMGrad_rampData length pt
		}if
		getRampData
		
		AGMGrad_enabledSmoothShade{
			getRampColorSpace
		}if
		
		AGMGrad_gradType 0 eq{
			firstRampColor
		}{
			lastRampColor
		}ifelse
		
		
		currentcolorspace 0 get /DeviceN eq{
			currenttints 0 get
			currenttints length 2 eq{
				currenttints 1 get
			}if
			setcolor
		}if
		
		currentoverprint AGMCORE_producing_seps and not{
			gsave fill grestore
		}if
	}if
	
	AGMGrad_gradType 1 eq{
		AGMGrad_gMatrix Gm
	}if
}def
/Gh{
	dup 1 gt{
		pop 1
	}if
	2 copy
	exch dup sin exch cos
	2 index mul exch
	2 index mul 
	neg /AGMGrad_yHi xp
	/AGMGrad_xHi xp
	/AGMGrad_radHilite AGMGrad_xHi 0 ne AGMGrad_yHi 0 ne or pt
	3 npop
}def
/Gc{
	
	AGMGrad_renderFlag 2 eq
	AGMGrad_enabledSmoothShade or{
		pop
	}{
		dup matrix_invertible{
			AGMGrad_gMatrix AGMGrad_tmpMat concatmatrix
			pushRampSpace
			AGMGrad_rampIndex 0 lt{
				lastRampColor
			}if
			linealFill
			popRampSpace
		}{
			pop
		}ifelse
	}ifelse
}def
/Gr{
	dup matrix_invertible{
		AGMGrad_gMatrix AGMGrad_tmpMat concatmatrix
		Gm
	}{
		pop
	}ifelse
}def
/GB{
	AGMGrad_rampDict null ne{
		end
	}if
	AGMGrad_retainPath
	myRestore
	end
	not{
		newpath
	}if
}def
/GD{
	currentdict/AGMGrad_gradNames get null eq{
		/AGMGrad_gradNames 20 dict def
	}if
	]
	dup {
		begin
			/Ramp [ Ramp 0 NumComponents getinterval aload pop NumSamples NumComponents expandColor ] def
			currentdict/Colorant known{
				/TintRamp [ TintRamp 0 NumTintComponents getinterval aload pop NumSamples NumTintComponents expandColor ] def
			}if
		end
	} forall
	AGMGrad_nColorsBd AGMGrad_gradType
	]  AGMGrad_gradName exch /AGMGrad_gradNames xput
	end
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Gradient_Sep 1.0 0
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
Adobe_AGM_Gradient begin
/initializeSep{
	/AGMGrad_ccAry1 5 array pt
	/AGMGrad_whiteBytes 1 makeByte8 pt
	/AGMGrad_name null pt
	/AGMGrad_nColorSpace null pt
	
	AGMCORE_composite_job{
		initializeInRIPSeps
	}{
		initializeHostBasedSeps
	}ifelse
	initializeAllSeps
	Adobe_AGM_Gradient{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/initializeAllSeps{
	AGMGrad_PathsOnly not level2 not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
					8 setImageParms
					AGMGrad_colorRamp{
						SpotColor{
							TintRamp 0 currenttints 0 get makeByte8 put
							currenttints length 2 eq{
								TintRamp 1 currenttints 1 get makeByte8 put
							}if
						}if
		
						currentcolor
						4{
							makeByte8 4 1 roll
						}repeat
						
						AGMGrad_SepColorImage
					}{
						currentcolor 1 exch sub 
						
						makeByte8 
						
						AGMGrad_SepImage
					}ifelse
				myRestore
			}ifelse
		}def
	}if
	 /AGMGrad_knockOut{
		AGMGrad_PathsOnly level2 or{
			gsave
			1 setgray 
			newpath
			0 0 moveto 1 0 lineto 1 1 lineto 0 1 lineto closepath 
			AGMGrad_&fill
			grestore
		}{
			8 setImageParms AGMGrad_whiteBytes AGMGrad_&image
		}ifelse
	}def
	/setCustomColor
	{
		1 index AGMGrad_black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll AGMGrad_ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setPreTintCustomColor
	{
		{
			pop setcmykcolor
		}{
			setCustomColor
		}ifelse
	}def
	
	/AGMGrad_CurrentInk{
		true
		AGMCORE_in_rip_sep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentgray 1 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		RenderCMYK{
			AGMGrad_CurrentInk
		}{
			currentcolorspace 0 get /DeviceCMYK eq{
				gsave
				currentcolor currentcolorants 0 get currenttints 0 get SpotConverted 0 get setPreTintCustomColor
				AGMGrad_CurrentInk
				grestore
				currenttints length 2 eq{
					gsave
					currentcolor currentcolorants 1 get currenttints 1 get SpotConverted 1 get setPreTintCustomColor
					AGMGrad_CurrentInk
					grestore
					or
				}if
			}{
				true	
			}ifelse
		} ifelse
	}def
	/fillOvp{
		currentoverprint{
			AGMCORE_in_rip_sep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentgray 1 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		AGMGrad_&fill
	}def
	/fill{
		RenderCMYK{
			fillOvp
		}{
			currentcolorspace 0 get /DeviceGray eq{
				0 0 0 currentgray 1 exch sub setcmykcolor
			}if
			
			currentcolorspace 0 get /DeviceCMYK eq{
				
				gsave
				currentcolor currentcolorants 0 get currenttints 0 get SpotConverted 0 get setPreTintCustomColor
				fillOvp 
				grestore
				currenttints length 2 eq{
					gsave
					/AGMGrad_currentoverprint currentoverprint pt
					true setoverprint
					currentcolor currentcolorants 1 get currenttints 1 get SpotConverted 1 get setPreTintCustomColor
					fillOvp
					AGMGrad_currentoverprint setoverprint
					grestore
				}if
			}{
				gsave
				[/Separation currentcolorants 0 get substituteBlack currentcolorspace [/pop cvx currentcolor] cvx ] setcolorspace
				currenttints 0 get setcolor
				fillOvp
				grestore
				currenttints length 2 eq{
					gsave
					/AGMGrad_currentoverprint currentoverprint pt
					[/Separation currentcolorants 1 get substituteBlack currentcolorspace [/pop cvx currentcolor] cvx ] setcolorspace
					
					true setoverprint
					currenttints 1 get setcolor
					fillOvp
					AGMGrad_currentoverprint setoverprint
					grestore
				}if
			}ifelse
			newpath
		}ifelse
	}def
	
	/rampImage{
		currentoverprint{
			rectImage
		}{
			AGMGrad_enabledSmoothShade{
				fillRamp
			}{
				AGMGrad_nSamples setImageParms
				Ramp aload pop
				AGMGrad_colorRamp{
					AGMGrad_SepColorImage
				}{
					AGMGrad_SepImage
				}ifelse
			}ifelse
		}ifelse
	}def
}def
/initializeInRIPSeps{
	/AGMGrad_decodeNorm	[0 1] pt
	/AGMGrad_SpotConverted
	{
		SpotColor{
			Colorants exch get /AGMGrad_name xp
			AGMGrad_name dup null ne exch AGMGrad_black ne and{
				false
				currentpagedevice/SeparationColorNames get{
					AGMGrad_name eq or
				}forall
				not
			}{
				false
			}ifelse
		}{
			pop false
		}ifelse
	}def
	/AGMGrad_SepImage{
			/DeviceGray setcolorspace
			AGMGrad_decodeNorm dictImage
	}def
	/AGMGrad_SepColorImage{
		RenderCMYK{
			[ NumComponents 1 add 1 roll ] 
			[ NumComponents { 0 1 } repeat ]
			dictImage
		}{
			NumComponents npop
			[/Separation Colorants 0 get substituteBlack /DeviceGray{}] setcolorspace
			4 copy
			TintRamp 0 get AGMGrad_decodeNorm dictImage
			/AGMGrad_currentoverprint currentoverprint pt
			true setoverprint
			NumTintComponents 2 eq{
				[/Separation Colorants 1 get substituteBlack /DeviceGray{}] setcolorspace
				TintRamp 1 get  AGMGrad_decodeNorm dictImage
			}{
				4 npop
			}ifelse
			AGMGrad_currentoverprint setoverprint
		}ifelse
	}def
	/getRampColorSpace{
		
		RenderCMYK not{
			[/DeviceN 
				[
				Colorants 0 get
				substituteBlack
				NumTintComponents 2 eq{
					Colorants 1 get
					substituteBlack
				}if
				] /DeviceCMYK {}
			] setcolorspace
			/AGMGrad_nColorSpace currentcolorspace pt
		}if
		
		AGMGrad_nSamples 1 gt{ 
			firstRampColor
		}if
		RenderCMYK{
			/AGMGrad_C0 [currentcolor] pt
			/AGMGrad_C0_Space currentcolorspace pt
		}{
			/AGMGrad_C0 [
				currenttints 0 get
				currenttints length 2 eq{
					currenttints 1 get
				}if
			] pt
			/AGMGrad_C0_Space AGMGrad_nColorSpace pt
		}ifelse
		
		AGMGrad_nSamples 1 gt{ 
			lastRampColor
		}if
		RenderCMYK{
			/AGMGrad_C1 [currentcolor] pt
			/AGMGrad_C1_Space currentcolorspace pt
		}{
			/AGMGrad_C1 [
				currenttints 0 get
				currenttints length 2 eq{
					currenttints 1 get
				}if
			] pt
			/AGMGrad_C1_Space AGMGrad_nColorSpace pt
		}ifelse
		
		/AGMGrad_rampColorSpace AGMGrad_C0_Space pt
	}def
}def
/initializeHostBasedSeps{
	/setcolor null pt
	/currentcolor null pt
	/setcolorspace null pt
	/currentcolorspace null pt
	/AGMGrad_currentcmyk 4 array pt
	/AGMGrad_currentgray null pt
	/AGMGrad_currentrgb 3 array pt
	
	
	/setcolorspace
	{
		0 get /AGMGrad_currentcolorspace xp
		AGMGrad_currentcolorspace /DeviceCMYK eq{
			/setcolor 
			{
				4 copy AGMGrad_currentcmyk astore pop setcmykcolor
			}bind pt
			/currentcolor 
			{
				AGMGrad_currentcmyk aload pop
			}bind pt
		}{
			AGMGrad_currentcolorspace /DeviceGray eq{
				/setcolor
				{
					dup /AGMGrad_currentgray xp setgray
				}bind pt
				/currentcolor
				{
					AGMGrad_currentgray
				}bind pt
			}{
				AGMGrad_currentcolorspace /DeviceRGB eq{
					/setcolor
					{
						3 copy AGMGrad_currentrgb astore pop setrgbcolor
					} bind pt
					/currentcolor
					{
						AGMGrad_currentrgb aload pop
					}bind pt
				}if
			}ifelse
		}ifelse
	}pt
	/currentcolorspace
	{
		[ AGMGrad_currentcolorspace ]
	}bind pt
	/AGMGrad_invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/AGMGrad_ccThrough{
		gsave
		1 setCustomColor
		currentgray 1 ne
		grestore
	}def
	/AGMGrad_SpotConverted
	{
		AGMCORE_is_cmyk_sep SpotColor and{
			Colorants exch get /AGMGrad_name xp
			AGMGrad_name dup null ne exch AGMGrad_black ne and{
				1 1 1 1 AGMGrad_name AGMGrad_ccThrough
			}{
				false
			}ifelse
		}{
			pop false
		}ifelse
	}def
	/AGMGrad_SpotChannel
	{
		AGMCORE_is_cmyk_sep SpotColor not and{
			pop false
		}{
			Colorants exch get /AGMGrad_name xp
			AGMGrad_name null eq{
				false
			}{
				1 1 1 1 AGMGrad_name AGMGrad_ccThrough 
			}ifelse
		}ifelse
	}def
	/getChannelData
	{
		AGMCORE_is_cmyk_sep RenderCMYK and{
			AGMCORE_black_plate{
				4 1 roll 3 npop
			}{
				AGMCORE_yellow_plate{
					4 2 roll 3 npop
				}{
					AGMCORE_magenta_plate{
						4 3 roll 3 npop
					}{
						3 npop
					}ifelse
				}ifelse
			}ifelse
			/Invert /IsData
		}{
			4 npop
			/NoInvert /NoData
			
			SpotColor{
				0 AGMGrad_SpotChannel{
					pop pop
					TintRamp 0 get /Invert /IsData 
				}{
					NumTintComponents 2 eq{
						1 AGMGrad_SpotChannel{
							pop pop
							TintRamp 1 get /Invert /IsData 
						}if
					}if
				}ifelse
			}if
		}ifelse
	}def
	/renderChannelData
	{
		gsave
		
		/IsData eq{
			/Invert eq{
				AGMGrad_invertXfer
			}if
			systemdict/image get exec
		}{
			5 npop
			AGMGrad_knockOut
		}ifelse
		
		grestore
	}def
	/AGMGrad_SepImage{
		dup dup dup
		getChannelData
		exch pop /NoInvert exch
		renderChannelData
	}def
	/AGMGrad_SepColorImage{
		
		/AGMGrad_currentoverprint currentoverprint pt
		SpotColor{
			NumTintComponents 2 eq{
				 1 AGMGrad_SpotChannel{
					true setoverprint
				}if
			}if
		}if
		getChannelData 
		renderChannelData
	
		AGMGrad_currentoverprint setoverprint
	}def
	/getRampColorSpace{
				
		AGMGrad_nSamples 1 gt{ 
			firstRampColor
		}if
		
		/AGMGrad_C0_Space [/DeviceGray] pt
		RenderCMYK{
			/AGMGrad_C0 [currentgray] pt
		}{
			/AGMGrad_C0 [
				0
				0 AGMGrad_SpotChannel{
					pop currenttints 0 get
				}if
				currenttints length 2 eq{
					1 AGMGrad_SpotChannel{
						pop currenttints 1 get
					}if
				}if
				1 exch sub
			] pt
		}ifelse
		
		AGMGrad_nSamples 1 gt{ 
			lastRampColor
		}if
		
		/AGMGrad_C1_Space [/DeviceGray] pt
		RenderCMYK{
			/AGMGrad_C1 [currentgray] pt
		}{
			/AGMGrad_C1 [
				0
					0 AGMGrad_SpotChannel{
						pop currenttints 0 get
					}if
					currenttints length 2 eq{
						 1 AGMGrad_SpotChannel{
							pop currenttints 1 get
						}if
					}if
				1 exch sub
			] pt
		}ifelse
		
		/AGMGrad_rampColorSpace AGMGrad_C0_Space pt
	}def
}def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin
/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at least
PostScript Level ^	and at least PostScript version ^. Ensure that the PPD is correct or that
the PostScript  level requested is supported by this printer. ) def
/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate
with on-host methods. ) def
/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end put
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_AGM_Gradient/doc_setup get exec
%%EndSetup
%%Page: name:1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Gradient/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
0.5 -0.5 scale 0 -90.7598 translate
gsave
[1 0 0 1 0 0 ] concat
gsave
0 0 mo
0 73.7598 ln
294.008 73.7598 ln
294.008 0 ln
clp
238.891 38.9004 mo
238.891 51.3594 228.793 61.459 216.331 61.459 cv
203.87 61.459 193.77 51.3594 193.77 38.9004 cv
193.77 26.4414 203.87 16.3398 216.331 16.3398 cv
228.793 16.3398 238.891 26.4414 238.891 38.9004 cv
false op
(23 ) 1 2 Adobe_AGM_Gradient/Gd get exec
<<
/Start 0 
/End 1 
/Mid 0.5 
/NumSamples 256 
/CSA /1 
/Interpolation false
/NumComponents 4 /Ramp [
<
0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E
0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0B0C0C0B0B0B0B0B0B0B0B0B0B0B0A0A0A
0A0A0A0A0A0A0A0A0A0A0A09090A0909090908090908080808080808090909080909090909090909
0909090909090A0A0909090909090909090909090909090909080808080808080808080808080808
08080707070707070707070707070707060706050506060506060606060607060607070706060606
06060607070707070707070708070707070707070707070707070707070706050505050505050504
04040404040303020202020101010000
>
<
4A4A49494948484847474747464646454545444444434343424242424141414040403F3F3F3E3E3E
3D3D3D3E3D3D3D3C3C3C3B3B3B3A3A3A393939383838383737373636363636363535353434343433
33333232323131313030302F2F2F302F2F2F2E2E2E2D2D2D2C2C2C2B2B2B2A2A2A2A292929282828
27272726262624242525242424232323222222212121202020201F1F1F1E1E1E1D1D1D1C1C1C1B1B
1B1A1B1B1B1A1A1A1919191818181717171616161615151514141413131312121211111111101010
0F0F0F0E0E0E0D0D0D0C0C0C0B0B0B0B0A0A0A090909080808070707060606060505050505040404
04030303020202020101010101010000
>
<
F3F3F3F2F2F2F2F2F2F2F1F1F0F0EFEFEEEDEDECEBEBEAE9E8E7E6E5E4E3E2E1E0DEDDDCDBDAD8D7
D6D5D3D2D1D0CECDCCCAC9C8C7C5C4C3C1C0BFBEBDBBBAB9B8B7B6B5B4B3B2B1B0AFADACABAAA9A8
A7A6A5A4A3A2A09F9E9D9C9B9A9998979694939291908F8E8D8C8B8A898887868584838281807F7E
7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
5554535251504F4E4E4D4B4B4A494847464544434241403F3F3E3D3C3B3A39383736353433333231
302F2E2D2C2B2B2A292827262524232222201F1F1E1D1C1B1A1A19181716151413121111100F0E0D
0C0C0B0A090807070605040302020100
>
<
02020202020202020202020202020202020202020201010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010100000000000000000000000000000000000000000000
00000101010101010101010101010101010101010101010101010000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
>
] 
/RenderCMYK null
/SpotColor false
>>
GD
Adobe_AGM_Gradient/Gb get exec
0 0 Gh
false 1 (23 ) 0 0 0 11.7493 [22.5598 0 0 22.5598 216.333 38.9014 ] Gg
GB
157.418 67.1211 mo
154.831 68.7051 153.094 70.373 153.094 72.127 cv
153.094 72.8301 153.397 73.4102 153.948 73.7598 cv
154.831 74.3223 156.258 74.2383 157.77 73.5371 cv
157.778 73.5332 216.485 44.834 216.485 44.834 cv
246.87 57.2168 ln
248.354 57.9082 249.784 57.9902 250.665 57.4277 cv
251.211 57.0742 251.516 56.498 251.516 55.7949 cv
251.516 54.041 249.405 52.2441 247.147 50.7676 cv
229.383 38.9043 ln
289.584 6.54883 ln
292.27 5.10742 294.008 3.35547 294.008 1.61328 cv
294.008 0.919922 293.709 0.349609 293.167 0 cv
292.28 -0.570313 290.836 -0.494141 289.301 0.207031 cv
289.305 0.205078 ln
216.493 32.7969 ln
186.141 20.9629 ln
184.633 20.2754 183.192 20.1992 182.303 20.7676 cv
181.76 21.1191 181.459 21.6914 181.459 22.3809 cv
181.459 24.1211 183.542 25.9258 185.926 27.332 cv
203.635 38.7891 ln
157.418 67.1211 ln
0 0 0 0 cmyk
f
92.8252 26.4297 mo
92.8252 23.7383 94.8525 21.5332 97.3306 21.5332 cv
99.8091 21.5332 101.835 23.7383 101.835 26.4297 cv
101.835 51.1191 ln
101.835 53.8164 99.8091 56.0156 97.3306 56.0156 cv
94.8525 56.0156 92.8252 53.8164 92.8252 51.1191 cv
92.8252 26.4297 ln
0.945098 0.627451 0.0627451 0.00784314 cmyk
f
162.354 25.4199 mo
163.991 23.2832 167.5 21.5332 170.145 21.5332 cv
172.788 21.5332 173.534 23.2168 171.795 25.2734 cv
148.985 52.2773 ln
147.245 54.332 143.835 56.0156 141.405 56.0156 cv
138.976 56.0156 135.551 54.3477 133.792 52.3066 cv
110.524 25.2461 ln
108.767 23.2051 109.512 21.5332 112.183 21.5332 cv
114.855 21.5332 118.421 23.25 120.118 25.3457 cv
120.118 25.3457 137.827 43.0039 141.539 43.2266 cv
145.245 43.4512 162.354 25.4199 162.354 25.4199 cv
f
97.4126 12.7773 mo
95.6816 12.7773 ln
92.7427 5.69727 ln
92.6704 5.4375 92.6704 5.32227 92.6704 5.17773 cv
92.6704 4.16406 94.7783 3.67383 96.812 3.67383 cv
98.2432 3.67383 99.5981 3.96484 100.2 4.45508 cv
100.577 4.77344 100.577 5.06055 100.501 5.34961 cv
97.4126 12.7773 ln
f
34.54 14.8359 mo
37.2622 14.8359 41.7144 14.8477 44.436 14.8594 cv
44.436 14.8594 55.5303 14.9023 63.0474 19.2871 cv
67.1978 21.6777 71.3477 25.9277 71.3477 32.2363 cv
71.3477 36.2207 69.6655 40.5371 65.1787 43.9883 cv
56.7656 50.3652 39.3872 50.5176 39.3872 50.5176 cv
36.665 50.543 32.2134 50.5625 29.4912 50.5625 cv
16.2783 50.5625 ln
13.5566 50.5625 11.3301 48.2051 11.3301 45.3242 cv
11.3301 20.0801 ln
11.3301 17.1953 13.5566 14.8359 16.2783 14.8359 cv
34.54 14.8359 ln
cp
0 50.9668 mo
0 53.8516 2.22607 56.207 4.94824 56.207 cv
31.7471 56.207 ln
45.0972 56.207 60.5791 56.0078 71.6851 49.5 cv
76.2842 46.7129 82.79 41.0684 82.79 32.4355 cv
82.79 23.4043 76.0601 17.627 69.6655 14.5059 cv
59.1201 9.39453 44.3232 9.34375 44.3232 9.34375 cv
41.6016 9.33398 37.1484 9.32813 34.4263 9.32813 cv
4.94824 9.32813 ln
2.22607 9.32813 0 11.6855 0 14.5664 cv
0 50.9668 ln
f
226.542 38.8965 mo
288.85 6.22461 ln
291.262 4.92188 292.993 3.26758 292.993 1.75 cv
292.993 0.228516 291.2 -0.201172 289.006 0.798828 cv
216.346 35.3652 ln
185.989 21.5039 ln
183.797 20.5039 182.002 20.9336 182.002 22.4531 cv
182.002 23.9727 184.018 25.7813 186.147 26.9297 cv
206.092 38.8965 ln
157.786 67.4902 ln
155.538 68.793 153.723 70.5137 153.723 72.0488 cv
153.723 73.5859 155.502 74.0137 157.678 73.0059 cv
216.344 42.2207 ln
246.676 56.7207 ln
248.85 57.7305 250.631 57.3047 250.631 55.7676 cv
250.631 54.2324 248.84 52.5664 246.573 51.209 cv
226.542 38.8965 ln
f
grestore
grestore
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
Adobe_AGM_Gradient/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
%%Trailer
Adobe_AGM_Gradient/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
gsave userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse grestore 
